<#@ template language="C#" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
<#
    var q = new[]
    {
        "int", "uint",
        "short", "ushort",
        "long", "ulong",
        "byte", "sbyte"
    };
#>

namespace iSukces.Code.Interfaces
{
    partial class CsEnumHelper {

        // ================================
        public static object GetZeroValue(IEnumerable<object> values, Type ut) {
<#
    foreach (var i in q)
    {
#>
            if (ut == typeof(<#= i #>))
                return values.FirstOrDefault(a => (<#= i #>)a == 0);            
<#
    }
#>
            return null;
        }

        // ================================
        public static IReadOnlyList<ushort> GetBitsMap(object value, Type ut) {
            var result = new List<ushort>();
<#
    foreach (var i in q)
    {
        var cast = i == "byte" || i == "sbyte" || i == "short" || i == "ushort"; 
        var e1 = "tmp >> 1";
        if (cast)
            e1 = "(" + i + ")(" + e1 + ")"; 
#>
            // ------------------- <#=   i  #>
            if (ut == typeof(<#= i #>)) {
                ushort bitIndex = 0;
                var tmp = (<#= i #>)value;
                while(tmp != 0) {
                    if ((tmp & 1) > 0)
                        result.Add(bitIndex);
                    tmp = <#= e1 #>;
                    bitIndex ++ ;
                }
                return result;
            }            
<#
    }
#>
            return new ushort[0];
        }
        // ================================


        public static IEnumerable<string> GetFlagStrings(object value, Type ut, object[] maps, string typeName) {
<#
    for(int idx=0; idx<q.Length; idx++)
    {
        var ty = q[idx];
        var cast = ty == "byte" || ty == "sbyte" || ty == "short" || ty == "ushort"; 
        string e1;
        if (cast)
            e1 = "tmp = (" + ty + ")(tmp & ~m1)";
        else
            e1 = "tmp &= ~m1";
        
        var addelse = idx == 0 ? "" : "else ";
#>
            // ------------------- <#=   ty  #>
            <#= addelse #>if (ut == typeof(<#= ty #>)) {
                var tmp = (<#= ty #>)value;
                foreach (var m in maps)
                {
                    if (tmp == 0) yield break;
                    var m1 = (<#= ty #>)m;
                    if ((tmp & m1) != m1) continue;
                    yield return typeName + "." + m;
                    <#= e1 #>;
                }

                if (tmp != 0)
                    yield return "(" + typeName + ")" + tmp.ToString(CultureInfo.InvariantCulture);
            }            
<#
    }
#>
        
        }
        // ================================
    }
}
 
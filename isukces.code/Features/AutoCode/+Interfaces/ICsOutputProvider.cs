using System;
using System.ComponentModel;
using JetBrains.Annotations;

namespace iSukces.Code.AutoCode
{
    public interface ICsOutputProvider
    {
        [CanBeNull]
         CsOutputFileInfo GetOutputFileInfo(Type type);
    }
    
    [ImmutableObject(true)]
    public class CsOutputFileInfo : IEquatable<CsOutputFileInfo>
    {
        public CsOutputFileInfo([NotNull] string fileName,
            bool isEmbedded,
            [NotNull] string embeddedFileDelimiter = DefaultEmbeddedFileDelimiter)
        {
            FileName   = fileName ?? throw new ArgumentNullException(nameof(fileName));
            if (string.IsNullOrEmpty(fileName))
                throw new ArgumentException("File name can't be empty");
            IsEmbedded            = isEmbedded;
            
            if (string.IsNullOrEmpty(embeddedFileDelimiter))
                throw new ArgumentException("embeddedFileDelimiter can't be empty");
            EmbeddedFileDelimiter = embeddedFileDelimiter ?? throw new ArgumentNullException(nameof(embeddedFileDelimiter));
        }

        public override string ToString()
        {
            return $"FileName={FileName}, IsEmbedded={IsEmbedded}";
        }

        public bool Equals(CsOutputFileInfo other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;
            return string.Equals(FileName, other.FileName, StringComparison.OrdinalIgnoreCase) 
                   && IsEmbedded == other.IsEmbedded 
                   && string.Equals(EmbeddedFileDelimiter, other.EmbeddedFileDelimiter, StringComparison.Ordinal);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != this.GetType()) return false;
            return Equals((CsOutputFileInfo)obj);
        }

        public override int GetHashCode()
        {
            return FileName.GetHashCode();
        }

        public static bool operator ==(CsOutputFileInfo left, CsOutputFileInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CsOutputFileInfo left, CsOutputFileInfo right)
        {
            return !Equals(left, right);
        }

        [NotNull]
        public string FileName              { get; }
        public bool   IsEmbedded            { get; }
        
        [NotNull]
        public string EmbeddedFileDelimiter { get; }

        public const string DefaultEmbeddedFileDelimiter = "autogenerated code";
    }

}

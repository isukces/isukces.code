#nullable enable
using System;
using System.ComponentModel;

namespace iSukces.Code.AutoCode;

public interface ICsOutputProvider
{
    CsOutputFileInfo? GetOutputFileInfo(Type type);
}

[ImmutableObject(true)]
public sealed class CsOutputFileInfo : IEquatable<CsOutputFileInfo>
{
    public CsOutputFileInfo(string fileName, bool isEmbedded)
    {
        FileName = fileName ?? throw new ArgumentNullException(nameof(fileName));
        if (string.IsNullOrEmpty(fileName))
            throw new ArgumentException("File name can't be empty");
        IsEmbedded = isEmbedded;
    }

    public override string ToString()
        => $"FileName={FileName}, IsEmbedded={IsEmbedded}";

    public bool Equals(CsOutputFileInfo? other)
    {
        if (ReferenceEquals(null, other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return FileName == other.FileName && IsEmbedded == other.IsEmbedded && EmbeddedFileDelimiter == other.EmbeddedFileDelimiter;
    }

    public override bool Equals(object? obj) => ReferenceEquals(this, obj) || obj is CsOutputFileInfo other && Equals(other);

    public override int GetHashCode()
    {
#if NET8_0_OR_GREATER
        return HashCode.Combine(FileName, IsEmbedded, EmbeddedFileDelimiter);
#else
        var a = FileName?.GetHashCode() ?? 0;
        var b = IsEmbedded.GetHashCode();
        return a * 397 ^ b;
        // return HashCode.Combine(FileName, IsEmbedded);
#endif
    }

    public static bool operator ==(CsOutputFileInfo? left, CsOutputFileInfo? right)
        => Equals(left, right);

    public static bool operator !=(CsOutputFileInfo? left, CsOutputFileInfo? right)
        => !Equals(left, right);

    public string FileName   { get; }
    public bool   IsEmbedded { get; }

#if NET8_0_OR_GREATER
    // ReSharper disable once AutoPropertyCanBeMadeGetOnly.Global
    public string EmbeddedFileDelimiter { get; init; } = DefaultEmbeddedFileDelimiter;

#else
    public string EmbeddedFileDelimiter { get; set; } = DefaultEmbeddedFileDelimiter;
#endif

    public FileScopeNamespaceConfiguration? FileScopeNamespace { get; init; }
    public const string DefaultEmbeddedFileDelimiter = "autogenerated code";
}
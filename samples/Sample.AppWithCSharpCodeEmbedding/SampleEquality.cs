using System;
using iSukces.Code.Interfaces;
using iSukces.Code.IO;
using JetBrains.Annotations;

namespace Sample.AppWithCSharpCodeEmbedding
{
    [Auto.EqualityGeneratorAttribute]
    public sealed partial class SampleEquality
    {
        
        [UsedImplicitly]
        public static string GetCodeFilePath()
        {
            return CodeFileUtils.GetCallerFilePath();
        }
        
        [Auto.StringComparisonAttribute(StringComparison.OrdinalIgnoreCase)]
        public string Name { get; set; }

        public int Age { get; set; }
        
    }
}

// -----===== autogenerated code =====-----
// ReSharper disable All

namespace Sample.AppWithCSharpCodeEmbedding
{
    partial class SampleEquality : iSukces.Code.AutoCode.IAutoEquatable<SampleEquality>
    {
        public override bool Equals(object other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;
            return other is SampleEquality otherCasted && Equals(otherCasted);
        }

        public bool Equals(SampleEquality other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;
            return Age == other.Age
                && StringComparer.OrdinalIgnoreCase.Equals(Name, other.Name);
        }

        public override int GetHashCode()
        {
            unchecked
            {
                return StringComparer.OrdinalIgnoreCase.GetHashCode(Name ?? string.Empty) * 397 ^ Age;
            }
        }

        public static bool operator !=(SampleEquality left, SampleEquality right)
        {
            return !Equals(left, right);
        }

        public static bool operator ==(SampleEquality left, SampleEquality right)
        {
            return Equals(left, right);
        }

    }
}
